using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Xml;

namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        public string currentarchive = "";
        public List<Process> P = new List<Process>();

        public string[] scan_pack()
        {
            string filename = (System.IO.Directory.GetCurrentDirectory() + "/pack/").Replace("%20", " ").Replace("\\","/");
            //MessageBox.Show(filename);
            if (!System.IO.Directory.Exists(filename))
            {
                MessageBox.Show("Pack-Ordner nicht gefunden.");
                //Application.Exit();
                return null;
            }
            string[] files = System.IO.Directory.GetFiles(System.IO.Directory.GetCurrentDirectory() + "/pack/");
            return files;
        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (currentarchive == "")
            {
                MessageBox.Show("Bitte wähle zunächst rechts ein Archiv aus.");
            }
            else
            {
                listBox2.Items.Clear();
                string bla = System.IO.Directory.GetCurrentDirectory() + "/pack2/" + currentarchive + "/";
                //MessageBox.Show(bla);
                if (System.IO.Directory.Exists(bla))
                {
                    string[] files = System.IO.Directory.GetFileSystemEntries(System.IO.Directory.GetCurrentDirectory() + "/pack2/" + currentarchive + "/", "*", System.IO.SearchOption.AllDirectories);
                    List<string> writefiles = new List<string>();
                    foreach (string file in files)
                    {
                        if (!System.IO.Directory.Exists(file))
                        {
                            string tmp = file.Substring(file.LastIndexOf('/') + 1);
                            listBox2.Items.Add(tmp);
                            writefiles.Add(file);
                        }
                    }
                    System.IO.File.Delete(System.IO.Directory.GetCurrentDirectory() + "/xml/create_" + currentarchive + ".xml");
                    System.IO.StreamWriter handle = System.IO.File.CreateText(System.IO.Directory.GetCurrentDirectory() + "/xml/create_" + currentarchive + ".xml");
                    handle.Write("<!-- This file was generated by the Metin2 Unpack Helper by xenor -->\n<Buildfile version=\"1.1\">\n\t<Action type=\"create\" output=\"" + System.IO.Directory.GetCurrentDirectory() + "\\pack\\" + currentarchive + "\">\n");
                    foreach (string file in writefiles)
                    {
                        int type = 1;
                        if (file.EndsWith(".txt")) type = 2;
                        string filename = file.Substring(file.IndexOf("pack2/" + currentarchive));
                        string firstFileName = filename.Substring(7 + (currentarchive.Length)).Replace("\\","/");
                        string lastFileName = filename.Replace("/", "\\");
                        handle.Write("\t\t<File archivedPath=\"" + firstFileName + "\" type=\"" + type + "\"><![CDATA[" + lastFileName + "]]></File>\n");
                    }
                    handle.Write("\t</Action>\n</Buildfile>");
                    handle.Flush();
                    handle.Close();
                }
                else
                {
                    MessageBox.Show("Dieses Archiv wurde noch nicht entpackt.", "Fehler");
                }
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            listBox1.Items.Clear();
            string[] files = this.scan_pack();
            if (files != null)
            {
                foreach (string file in files)
                {
                    string tmp = file.Substring(file.LastIndexOf('/') + 1).Trim();
                    if (tmp.EndsWith(".big"))
                    {
                        string filename = tmp.Substring(0, tmp.Length - 4);
                        listBox1.Items.Add(filename);
                    }
                }
            }
            else
            {
                button1.Enabled = false;
                button2.Enabled = false;
                button3.Enabled = false;
                button4.Enabled = false;
                button5.Enabled = false;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (currentarchive == "")
            {
                MessageBox.Show("Bitte wähle zunächst rechts ein Archiv aus.");
            }
            else
            {
                System.IO.Directory.CreateDirectory(System.IO.Directory.GetCurrentDirectory() + "/xml/");
                string content = System.IO.File.ReadAllText(System.IO.Directory.GetCurrentDirectory() + "/xml/create_" + currentarchive + ".xml");
                string content2 = content.Replace("output=\"" + currentarchive + "\"", "output=\"pack/" + currentarchive + "\"");
                System.IO.File.WriteAllText(System.IO.Directory.GetCurrentDirectory() + "/xml/create_" + currentarchive + ".xml", content2);

                Process P = new Process();
                string archiverFileName = System.IO.Directory.GetCurrentDirectory() + "/archiver.exe";
                if (System.IO.File.Exists(archiverFileName))
                {
                    P.StartInfo.FileName = archiverFileName;
                    P.StartInfo.Arguments = "\"" + System.IO.Directory.GetCurrentDirectory() + "/xml/create_" + currentarchive + ".xml" + "\"";
                    P.Start();
                    this.P.Add(P);
                }
                else
                {
                    MessageBox.Show("Archiver nicht gefunden. Überprüfe deine Einstellungen!");
                }
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (currentarchive == "")
            {
                MessageBox.Show("Bitte wähle zunächst rechts ein Archiv aus.");
            }
            else
            {
                string str = "<Buildfile version=\"1.1\"><Action type=\"extract\" archivePath=\"" + System.IO.Directory.GetCurrentDirectory() + "\\pack\\" + currentarchive + "\" outputPath=\"" + System.IO.Directory.GetCurrentDirectory() + "\\pack\\" + currentarchive + "\" extractAll=\"YES\" createXML=\"YES\" xmlPath=\"" + System.IO.Directory.GetCurrentDirectory() + "\\xml\\create_" + currentarchive + ".xml\" /></Buildfile>";
                System.IO.Directory.CreateDirectory(System.IO.Directory.GetCurrentDirectory() + "/xml/");
                System.IO.File.Delete(System.IO.Directory.GetCurrentDirectory() + "/xml/extract_" + currentarchive + ".xml");
                System.IO.StreamWriter handle = System.IO.File.CreateText(System.IO.Directory.GetCurrentDirectory() + "/xml/extract_" + currentarchive + ".xml");
                handle.Write(str);
                handle.Flush();
                handle.Close();
                Process P = new Process();
                string archiverFileName = System.IO.Directory.GetCurrentDirectory() + "/" + System.IO.Directory.GetCurrentDirectory() + "/archiver.exe";
                if (System.IO.File.Exists(archiverFileName))
                {
                    P.StartInfo.FileName = archiverFileName;
                    P.StartInfo.Arguments = "\"" + System.IO.Directory.GetCurrentDirectory() + "/xml/extract_" + currentarchive + ".xml" + "\"";
                    P.Start();
                    this.P.Add(P);
                }
                else
                {
                    MessageBox.Show("Archiver nicht gefunden. Überprüfe deine Einstellungen!");
                }
            }
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                currentarchive = listBox1.SelectedItem.ToString();
            }
            catch{}
            listBox2.Items.Clear();
            if (System.IO.Directory.Exists(System.IO.Directory.GetCurrentDirectory() + "/pack2/" + currentarchive + "/"))
            {
                string[] files = System.IO.Directory.GetFileSystemEntries(System.IO.Directory.GetCurrentDirectory() + "/pack2/" + currentarchive + "/", "*", System.IO.SearchOption.AllDirectories);
                foreach (string file in files)
                {
                    if (!System.IO.Directory.Exists(file))
                    {
                        string tmp = file.Substring(file.LastIndexOf('/') + 1);
                        listBox2.Items.Add(tmp);
                    }
                }
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            Form f = new Form2();
            f.Show();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Application.ApplicationExit += new EventHandler(Application_ApplicationExit);

            /*
            string[] config = this.loadConfig();
            this.config = config;

            if (!System.IO.File.Exists(System.IO.Directory.GetCurrentDirectory() + "/" + this.config[2]))
            {
                MessageBox.Show("Archiver nicht gefunden. Überprüfe deine Einstellungen!");
                button1.Enabled = false;
                button2.Enabled = false;
                button3.Enabled = false;
                button4.Enabled = false;
                button5.Enabled = false;
            }
            */

            /*if (System.IO.File.Exists(System.IO.Directory.GetCurrentDirectory() + "/config.xml"))
            {
                /*string[] config = this.loadConfig();
                this.config = config;
            }
            else
            {
                string clientPath = "";
                bool fail = true;
                while(fail == true)
                {
                    MessageBox.Show("Bitte wähle deinen Client Ordner aus. Du musst dies nur einmal machen.");
                    FolderBrowserDialog folderDia = new FolderBrowserDialog();
                    folderDia.ShowNewFolderButton = false;
                    folderDia.ShowDialog();
                    clientPath = folderDia.SelectedPath;
                    if (!System.IO.Directory.Exists(clientPath + "/pack"))
                    {
                        MessageBox.Show("Pack-Ordner wurde nicht gefunden.");
                    }
                    else
                    {
                        fail = false;
                    }
                }

                string outputPath = "";
                fail = true;
                while(fail == true)
                {
                    MessageBox.Show("Bitte wähle den Ausgabe-Ordner");
                    FolderBrowserDialog folderDia = new FolderBrowserDialog();
                    folderDia.SelectedPath = clientPath;
                    folderDia.ShowNewFolderButton = true;
                    folderDia.ShowDialog();
                    outputPath = folderDia.SelectedPath;
                    if (!System.IO.Directory.Exists(outputPath))
                    {
                        MessageBox.Show("Ausgabe-Ordner existiert nicht.");
                    }
                    else
                    {
                        fail = false;
                    }
                }

                string archiverPath = "";
                fail = true;
                while (fail == true)
                {
                    OpenFileDialog archiverDia = new OpenFileDialog();
                    archiverDia.Title = "Bitte wähle deinen Archiver aus.";
                    archiverDia.Filter = "Archiver (*.exe)|*.exe";
                    archiverDia.ShowDialog();
                    archiverPath = archiverDia.FileName;
                    if (!System.IO.File.Exists(archiverPath))
                    {
                        MessageBox.Show("Archiver nicht gefunden.");
                    }
                    else
                    {
                        fail = false;
                    }
                }

                System.Uri uri1 = new Uri(clientPath);
                System.Uri uri2 = new Uri(System.IO.Directory.GetCurrentDirectory());
                Uri relativeUri = uri2.MakeRelativeUri(uri1);
                System.IO.Directory.GetCurrentDirectory() = "../" + relativeUri.ToString().Replace("\\","/").Replace("%20"," ");

                uri1 = new Uri(outputPath);
                uri2 = new Uri(archiverPath);
                relativeUri = uri2.MakeRelativeUri(uri1);
                this.config[1] = "./" + relativeUri.ToString().Replace("\\", "/").Replace("%20"," ");

                this.config[2] = archiverPath.Replace("\\", "/").Replace("%20"," ");

                MessageBox.Show(System.IO.Directory.GetCurrentDirectory());
                MessageBox.Show(this.config[1]);
                MessageBox.Show(this.config[2]);
            }*/

            listBox1.Items.Clear();
            string[] files = this.scan_pack();
            if (files != null)
            {
                foreach (string file in files)
                {
                    string tmp = file.Substring(file.LastIndexOf('/') + 1).Trim();
                    if (tmp.EndsWith(".big"))
                    {
                        string filename = tmp.Substring(0, tmp.Length - 4);
                        listBox1.Items.Add(filename);
                    }
                }
            }
            else
            {
                button1.Enabled = false;
                button2.Enabled = false;
                button3.Enabled = false;
                button4.Enabled = false;
                button5.Enabled = false;
            }
        }

        private void button7_Click(object sender, EventArgs e)
        {
            try
            {
                foreach (Process P in this.P)
                {
                    try
                    {
                        P.Kill();
                    }
                    catch { }
                }
            }
            catch { MessageBox.Show("Der Archiver wird nicht ausgeführt."); }
        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process tmp = new Process();
            tmp.StartInfo.FileName = "http://www.youtube.com/xenorOfficial";
            tmp.Start();
        }

        private void Application_ApplicationExit(object sender, EventArgs e)
        {
            foreach (Process P in this.P)
            {
                try
                {
                    P.Kill();
                }
                catch { }
            }
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {
            Form f = new Form3();
            f.Show();
            listBox1.Items.Clear();
            string[] files = this.scan_pack();
            if (files != null)
            {
                foreach (string file in files)
                {
                    string tmp = file.Substring(file.LastIndexOf('/') + 1).Trim();
                    if (tmp.EndsWith(".big"))
                    {
                        string filename = tmp.Substring(0, tmp.Length - 4);
                        listBox1.Items.Add(filename);
                    }
                }
            }
            else
            {
                button1.Enabled = false;
                button2.Enabled = false;
                button3.Enabled = false;
                button4.Enabled = false;
                button5.Enabled = false;
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            List<System.Windows.Forms.Button> a = new List<Button>();
            a.Add(this.button1);
            a.Add(this.button2);
            a.Add(this.button3);
            a.Add(this.button4);
            a.Add(this.button5);
            Form f = new Form4(false, ref a);
            f.Show();
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //currentarchive = textBox1.Text;
            }
            catch { }
            listBox2.Items.Clear();
            if (System.IO.Directory.Exists(System.IO.Directory.GetCurrentDirectory() + "/pack2/" + currentarchive + "/"))
            {
                string[] files = System.IO.Directory.GetFileSystemEntries(System.IO.Directory.GetCurrentDirectory() + "/pack2/" + currentarchive + "/", "*", System.IO.SearchOption.AllDirectories);
                foreach (string file in files)
                {
                    if (!System.IO.Directory.Exists(file))
                    {
                        string tmp = file.Substring(file.LastIndexOf('/') + 1);
                        listBox2.Items.Add(tmp);
                    }
                }
            }
        }
    }
}
